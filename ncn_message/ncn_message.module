<?php
//------------------------------------------------------------------------------
function ncn_message_menu()
{
    // message center main control
    $items['account/message-center'] = array(
      'title' => "Message Center",
      'page callback' => 'ncn_message_center',
      'type' => MENU_CALLBACK,
      'access arguments' => array('ncn message center'),
    );

    // mark a message as read
    $items['account/message-center/markread'] = array(
      'page callback' => 'ncn_message_markread',
      'type' => MENU_CALLBACK,
      'access arguments' => array('ncn message center'),
    );
    

    
    return $items;
}

function ncn_message_init() {
    
}

function ncn_message_permission()
{
    return array(
                    'ncn message center' =>  array(
                      'title' => t('ncn message center'),
                    ),  
                );      
}

function ncn_message_theme() {
  global $theme;
 
  return array(
    'ncn_message_reply_form' => array(
      'arguments' => array('form' => NULL),
      'template' => 'ncn-message-reply-form',
    ),
  );
}

function template_preprocess_ncn_message_reply_form(&$variables) {
    $variables['reply'] = array();
  $hidden = array();
  // Provide variables named after form keys so themers can print each element independently.
  foreach (element_children($variables['form']) as $key) {
    $type = $variables['form'][$key]['#type'];
    if ($type == 'hidden' || $type == 'token') {
      $hidden[] = drupal_render($variables['form'][$key]);
    }
    else {
      //$variables['reply'][$key] = drupal_render($variables['form'][$key]);
    }
  }
  // Hidden form elements have no value to themers. No need for separation.
  //$variables['reply']['hidden'] = implode($hidden);
  // Collect all form elements to make it easier to print the whole form.
    
    $variables['form']['submit']['#value'] = "";
    $variables['form']['submit']['#type'] = 'image_button';
    $variables['form']['submit']['#src'] = 'modules/ncn_message/images/reply-btn.png';
  $variables['form']['submit']['#attributes'] = array('class' => 'reply-submit-btn');
    
  $variables['ncn_message_reply_form_hidden'] = implode($hidden);
}
//------------------------------------------------------------------------------
function ncn_message_markread()
{

    if (!strstr($_SERVER['REQUEST_URI'], 'admin/config'))
    {
        GLOBAL $user;
        $msg_id = arg(3);
    }
    else
    {
        $user = user_load(1);
        $user->uid = 0;
        $msg_id = arg(4);
    }


    
    // is numeric?  
    if (!is_numeric($msg_id))
    {   exit;   }
    
    // update (making sure user owns the file)
//  $query = "UPDATE pm_message SET `read`=1 WHERE id=".$msg_id." AND `to`=".$user->uid;
    $result = db_query('UPDATE {pm_message} SET `read`=1 WHERE id=:a AND `to`=:b',array(':a'=>$msg_id,':b'=>$user->uid));
    echo "exit";
}

//------------------------------------------------------------------------------
function ncn_message_center()
{

    $return = '';
    // setup display
    drupal_add_js(drupal_get_path('module', 'ncn_message') . '/ncn_message.js');
    drupal_add_css(drupal_get_path('module', 'ncn_message').'/ncn_message.css', 'module', 'all', FALSE);
    
    ob_start();

    // switch functions/pages
    $tfunction = arg(2);    
    $is_admin = null;
    if (!strstr($_SERVER['REQUEST_URI'], 'admin/config'))
    {
        $is_admin = 0;
    } else {
        $is_admin = 1;
    }

    switch ($tfunction)
    {
        case "send":
            $desc = base64_decode(arg(4));
            pm_send_message($desc);
        break;
        // reply to a specific message
        case "reply":
            $title = pm_reply($is_admin);   
        break;
        
        // view all messages related to a claim
        case "viewthread":
            pm_viewthread($is_admin);   
        break;
        
        // inbox
        default:
            $title = pm_inbox($is_admin);
        break;
    
    }
    
    // get the page data
    $content = ob_get_contents();
    ob_end_clean();
    
    // build the template
    //drupal_set_title($title);

    $return .= $content;
    
    return($return);
}

//------------------------------------------------------------------------------
function pm_reply()
{
    GLOBAL $base_url;

    if (!strstr($_SERVER['REQUEST_URI'], 'admin/config'))
    {
        GLOBAL $user;
    }
    else
    {
        $user = user_load(1);
        $user->uid = 0;
    }


    // get reply to id
    $reply_to_id = arg(3);
    
    // check for numeric
    if (!is_numeric($reply_to_id))
    {   pm_inbox();return;      }
    
    // check that a thread exists and user has permission
//  $query = "SELECT * FROM pm_message WHERE `id`=".$reply_to_id." AND `to`=".$user->uid.";";
    $result = db_query('SELECT * FROM {pm_message} WHERE `id`=:a AND `to`=:b',array(':a'=>$reply_to_id,':b'=>$user->uid));
    $row_count = $result->rowCount();
    
    if ($row_count == 0)    // no thread exists/access denied
    {   pm_inbox();return;      }
    
    // get reply to
    $reply_to = $result->fetchAssoc();

    // get title
    $title = "Reply to: ".StripSlashes($reply_to['subject']);

    // get new message data 
    if ( ($reply_to['subject'][0] == "R") && ($reply_to['subject'][1] == "e") && ($reply_to['subject'][2] == ":") )
    {   $subject = StripSlashes($reply_to['subject']);  }
    else
    {   $subject = "Re: ".StripSlashes($reply_to['subject']);   }
    
    $old_body = explode("\n", StripSlashes($reply_to['body']));
    $body = "";
    
    foreach ($old_body as $line)
    {   $body .= "> ".trim($line)."\n";     }
    
    $body = "\n\n\n".$body;
    
    // save data for form
    $_SESSION['default_subject'] = $subject;
    $_SESSION['default_body'] = $body;
    drupal_set_title($title);

    
    // draw new message form
    print drupal_get_form('ncn_message_reply_form');
    
    return($title);
}   

function pm_send_message($title) {
    GLOBAL $base_url;

    if (!strstr($_SERVER['REQUEST_URI'], 'admin/config'))
    {
        GLOBAL $user;
    }
    else
    {
        $user = user_load(1);
        $user->uid = 0;
    }

    unset($_SESSION['default_subject']);
    unset($_SESSION['default_body']);
    $_SESSION['default_subject'] = $title;
    
    if (empty($title)) {
        $title = t("Send Message");
    } else {
        $title = t("Send Message ( !desc )", array('!desc'=>$title));
    }
    drupal_set_title($title);
    
    // When rejecting claim invoice, display popup window
    if (isset($_SESSION['reject_claim_invoice'])) {
        drupal_add_js("
                window.onload=function(){ 
                    alert('To change this invoice you need to provide detailed instructions on what needs to be changed or updated on your invoice.');
                }
            ", 
            'inline'
        );
    }
    print drupal_get_form('ncn_message_reply_form');
}
//------------------------------------------------------------------------------
// validate the reply form
function ncn_message_reply_form_validate($form, &$form_state)
{
    // check empty subject
    if (trim($form_state['values']['subject']) == "")
    {
        form_set_error('', 'You must enter a subject');
    }

    // check empty body
    if (trim($form_state['values']['body']) == "")
    {
        form_set_error('', 'You must enter a message');
    }

    // check html
    if (preg_match("/([\<])([^\>]{1,})*([\>])/i", trim($form_state['values']['body'])))
    {
        form_set_error('', 'Message cannot contain HTML');
    }
    
    return(true);
}

//------------------------------------------------------------------------------
// send message and bouce to inbox
function ncn_message_reply_form_submit($form, &$form_state)
{
GLOBAL $base_url;

    if (!strstr($_SERVER['REQUEST_URI'], 'admin/config'))
    {
        GLOBAL $user;
    }
    else
    {
        $user = user_load(1);
        $user->uid = 0;
    }

    $in_reply_to = $form_state['values']['in_reply_to'];
    $claim_id = 0;
    if (strpos($in_reply_to, 'c') === 0) {
        $claim_id = intval(substr($in_reply_to, 1));
        $in_reply_to = 0;
    } else {
        $in_reply_to = intval($in_reply_to);
    }
    
    // leave log file when rejecting claim invoice
    $b_claim_log = false;
    if (arg(5) == 'log') {
        $b_claim_log = true;
    }
    
    $msg = "<pre>".$form_state['values']['body']."</pre>";
    // send the message
    pm_send($user->uid, 0, $form_state['values']['subject'], $form_state['values']['body'], $claim_id, $in_reply_to, '', array(), $b_claim_log, $msg);
    
    
    if (isset($_SESSION['reject_claim_invoice'])) {
        if ($claim_id == $_SESSION['reject_claim_invoice']['claim_id']) {
            ncn_claims_manager_reject_claim_invoice_action($claim_id);      // reject claim invoice
        }
        unset($_SESSION['reject_claim_invoice']);
    }
    
    // message and redirect
    drupal_set_message('Message sent!', 'status');
    drupal_goto($base_url."/account/message-center/inbox");
}

//------------------------------------------------------------------------------
// define the reply form
function ncn_message_reply_form($form_state)
{
    $form = array();
    $form['#attributes'] = array('enctype' => "multipart/form-data");

        $form['subject'] = array(
            '#type' => 'textfield', 
            '#default_value' => t($_SESSION['default_subject']),
        );

        $form['body'] = array(
            '#type' => 'textarea', 
            '#default_value' => t($_SESSION['default_body']),
            '#resizable' => false,
            '#rows' => 12,
        );
        
        $form['in_reply_to'] = array(
            '#type' => 'hidden',
            '#value' => arg(3),
        );

    $form['submit'] = array('#type' => 'submit', '#weight' => 101, '#value' => t('Send Message'));
    return($form);

}

//------------------------------------------------------------------------------
// required for message sending
function ncn_message_mail($key, &$message, $params)
{
    switch ($key)
    {
        case "some_mail_key":
            $message['subject'] = $params['subject'];
            $message['body'][] = $params['body'];
            break;
        case "template_mail_key":
            $message['subject'] = $params['subject'];
            $message['body'][] = ncn_admin_get_mail_body( "{".$params['mail_template']."}", $message, $params );
            
            break;
    }
}

//------------------------------------------------------------------------------
function pm_message_tags($v, $body)
{
    foreach ($v as $key=>$val)
    {
        $body = str_replace('!'.$key, $val, $body);
    }
    
    return($body);
}

//------------------------------------------------------------------------------
function pm_send($from, $to, $subject, $body, $claim_id = 0, $in_reply_to = 0, $mail_template='', $_params=array(), $b_log=false, $log_message="", $chatter=true)
{
GLOBAL $user;
    $user = user_load($user->uid);
    // check the "in reply to"
    if ($in_reply_to != 0) 
    {
    //  $query = "SELECT * FROM pm_message WHERE `id`=".$in_reply_to;
        $result = db_query('SELECT * FROM {pm_message} WHERE `id`=:a',array(':a'=>$in_reply_to));
        $row_count = $result->rowCount();
        $row = $result->fetchAssoc();
        
        if (is_numeric($row['claim_id']))
        {   $claim_id = $row['claim_id'];   }
        
        if ($row['claim_log'] == 1) {
            $b_log = true;
            
        }
    }
    
    $claim_log = 0;
    if ($claim_id && $b_log) {
        if ($log_message != "") {
            $result = ncn_admin_insert_claim_log($claim_id, date('U'), $log_message);
        }
        $claim_log = 1;
    }
    // insert message into database
    if (is_numeric($from))
    {
    //  $query = "INSERT INTO pm_message VALUES(NULL, ".$from.", ".$to.", 0, ".$claim_id.", ".date('U').", \"".AddSlashes($subject)."\", \"".AddSlashes($body)."\", ".$in_reply_to.", 0, $claim_log);";
        $result = db_query('INSERT INTO {pm_message} VALUES(NULL,:a,:b,:c,:d,:e,:f,:g,:h,:i,:j)',
            array(':a'=>$from,':b'=>$to,':c'=>0,':d'=>$claim_id,':e'=>date('U'),':f'=>$subject,':g'=>$body,':h'=>$in_reply_to,':i'=>0,':j'=>$claim_log));

        if ($chatter) {
            $from_uid = $from;
            if (!$from) {
                $from_uid = $user->uid;
            }
            
            $msg = $subject."\r\n".$body;
            ncn_chatter_auto_post_in_claim($claim_id, 0, $msg, 0, 0, $from_uid);
        }
    }

    if ($mail_template == 'no mail') {
        return;
    }
    
    // get users email address
    $admin_user = user_load(1); // load admin account
    $admin_email_address = $admin_user->mail;

    if ($to != 0)
    {
        $_user = user_load($to);
        $to_email_address = $_user->mail;
    }
    else
    {   $to_email_address = $admin_email_address;   }
    
    // email to recipient
    $params = array(
        'body' => $body,
        'subject' => $subject,
        'mail_template' => $mail_template
    );
    
    //remain claim log
    if ($mail_template) {
        
    }
    
    $params = array_merge($params, $_params);
    //drupal_set_message("email_address: ".$to_email_address);
    if (!empty($to_email_address)) {
        if ($mail_template) {
            drupal_mail('ncn_message', 'template_mail_key', $to_email_address, language_default(), $params, $admin_email_address, TRUE);            
            if($_POST['claim_status']=='returned'){
                // Send mail to Director of Member Services if claim status is 'returned'
                send_returned_claim_mail_update('template_mail_key', $params, $admin_email_address);
            }
        } else {
            drupal_mail('ncn_message', 'some_mail_key', $to_email_address, language_default(), $params, $admin_email_address, TRUE);
            if($_POST['claim_status']=='returned'){
                // Send mail to Director of Member Services if claim status is 'returned'
                send_returned_claim_mail_update('some_mail_key', $params, $admin_email_address);
            }
        }
    }
    if ($to == 0) {
        if (isset($user->profile_memberid) && is_member($user->profile_memberid)) {
            $member_id = $user->profile_memberid;
        } 
        $member = get_member_from_id($member_id);
        if (!empty($member)) {
            /*$am_user = user_load($member['am_uid']);
            $to_am_mail = $am_user->mail;*/
            //drupal_set_message("am_email_address: ".$to_am_mail);
            
            $am_list = get_account_manager_list();
            foreach ($am_list as $am) {
                $to_am_mail = $am['mail'];
                //drupal_set_message("am_email_address: ".$to_am_mail);
                if (!empty($to_am_mail)) {
                    if ($mail_template) {
                        drupal_mail('ncn_message', 'template_mail_key', $to_am_mail, language_default(), $params, $admin_email_address, TRUE);
                    } else {
                        drupal_mail('ncn_message', 'some_mail_key', $to_am_mail, language_default(), $params, $admin_email_address, TRUE);
                    }
                }
            }
        }
    }
    return;
}

//------------------------------------------------------------------------------
function pm_viewthread($is_admin)
{
GLOBAL $base_url;

    if (!$is_admin)
    {
        GLOBAL $user;
    }
    else
    {
        $user = user_load(1);
        $user->uid = 0;
    }

    // get thread/claim id
    $claim_id = arg(3);
    
    // check for numeric
    if (!is_numeric($claim_id))
    {   pm_inbox();return;      }
    
    // check that a thread exists and user has permission
    //  $query = "SELECT * FROM pm_message WHERE `claim_id`=".$claim_id." AND (`to`=".$user->uid." OR `from`=".$user->uid.") AND `archived`=0 ORDER BY `timestamp` DESC;";
    $messages = db_query('SELECT * FROM {pm_message} WHERE `claim_id`=:a AND (`to`=:b OR `from`=:c) AND archived=0 ORDER BY timestamp DESC',array(':a'=>$claim_id,':b'=>$user->uid,':c'=>$user->uid));
    $row_count = $messages->rowCount();
    //$result_res = $result->fetchAssoc();
    //print_r($result_res); exit;
    if ($row_count == 0)    // no thread exists/access denied
    {   pm_inbox();return;      }
    
    // update all message sin thread as read
//  $query2 = "UPDATE pm_message SET `read`=1 WHERE `claim_id`=".$claim_id." AND `archived`=0 AND `to`=".$user->uid.";";
    $result2 = db_query('UPDATE {pm_message} SET `read` = 1 WHERE claim_id=:a AND archived=0 AND `to`=:b',array(':a'=>$claim_id,':b'=>$user->uid));
    // draw the thread
    $title = "Message";

    @include get_realpath('ncn_message', 'ui/pm_view_thread.php');
}
    
//------------------------------------------------------------------------------
function pm_get_username($user_id)
{
    if ($user_id == 0)
    {   return("Administrator");    }

    $user = user_load($user_id);
    return($user->name);
    
}

/**
 * Message Center Inbox
 */
function pm_inbox($is_admin)
{
GLOBAL $base_url;

    $user_id = 0;
    if (!$is_admin)
    {
        GLOBAL $user;
        $user_id = $user->uid;
    }
    else
    {
        $user = user_load(1);
        $is_admin = 1;
    }

    $per_page = 10;

    $query = "SELECT * FROM pm_message 
                WHERE `to`=".$user_id." AND `archived`=0 
                ORDER BY `timestamp` DESC";

    $messages = db_select('pm_message', 'pm')
                ->fields('pm')
                ->condition('pm.to', $user_id)
                ->condition('pm.archived', 0)
                ->orderBy('pm.timestamp', 'DESC')
                ->extend('PagerDefault')
                ->limit($per_page)
                ->execute()
                ->fetchAll();
    //ncn_print_r($messages);
    if ($is_admin)
    {
        $toggle_base = $base_url.'/admin/config/ncn_admin/messages_markread/';
    }
    else
    {
        $toggle_base = $base_url.'/account/message-center/markread/';
    }

    $title = "Message Center";

    @include get_realpath('ncn_message', 'ui/message_center_inbox.php');

    return ($title); 
}

//------------------------------------------------------------------------------
function body_for_html($body)
{
    $body = StripSlashes($body);
    $body = str_replace("<", "&lt;", $body);
    $body = str_replace(">", "&gt;", $body);
    $body = nl2br($body);
    return($body);
}

//------------------------------------------------------------------------------
