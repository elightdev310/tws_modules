<?php

/**
 *
 */

require_once('ncn_statement_ce.inc');
/**
 * hook_init function
 */
function ncn_statement_init() {
    
}

/**
 * hook_perm function
 */
function ncn_statement_permission()
{
    //return array('ncn statement management', 'ncn ce statement management');
    return array(
        'ncn statement management' => array(
          'title' => t('ncn statement management'),
        ),
        'ncn ce statement management' => array(
          'title' => t('ncn ce statement management'),
        ),
    );              
}

/**
 * hook_menu function
 */
function ncn_statement_menu()
{
    $items = array();
    
    $items['statement/create'] = array(
        'title' => t('Create A Statement'),
        'page callback' => 'ncn_statement_create_handler',
        'access arguments' => array('ncn statement management'),
        'type' => MENU_CALLBACK,
    );
    $items['statement/all_create'] = array(
        'title' => t('All Statements'),
        'page callback' => 'ncn_statement_all_create_handler',
        'type' => MENU_CALLBACK,
        'access arguments' => array('ncn statement management'),
    );
    
    $items['statement/download'] = array(
        'page callback' => 'ncn_statement_download',
        'type' => MENU_CALLBACK,
        'access arguments' => array('access content'),
    );
    
    $items['statement/delete'] = array(
        'page callback' => 'ncn_statement_delete',
        'type' => MENU_CALLBACK,
        'access arguments' => array('access content'),
    );
    
    /** NCN CE Portal Statement **/
    $items['ce_statement/create'] = array(
        'title' => t('Create A CE Statement'),
        'page callback' => 'ncn_statement_ce_create_handler',
        'access arguments' => array('ncn ce statement management'),
        'type' => MENU_CALLBACK,
    );
    $items['ce_statement/all_create'] = array(
        'title' => t('All CE Statements'),
        'page callback' => 'ncn_statement_ce_all_create_handler',
        'type' => MENU_CALLBACK,
        'access arguments' => array('ncn ce statement management'),
    );
    
    $items['ce_statement/download'] = array(
        'page callback' => 'ncn_statement_ce_download',
        'type' => MENU_CALLBACK,
        'access arguments' => array('access content'),
    );
    
    $items['ce_statement/delete'] = array(
        'page callback' => 'ncn_statement_ce_delete',
        'type' => MENU_CALLBACK,
        'access arguments' => array('ncn ce statement management'),
    );
    
    return $items;
}

// Handler (statement/create)
function ncn_statement_create_handler() {
    $uid = $_REQUEST['uid'];
    $date = $_REQUEST['date'];
    ncn_statement_create_statement($uid, $date);
    
    $_user = user_load($uid);
    if (is_distributor($_user)) {
        $type = 'distributor'; 
    } else {
        $type = 'associate'; 
    }
    $url = "admin/config/ncn_report/sales_detailed/$type/$date/$uid";
    drupal_goto($url);
}

// Handler (statement/download)
function ncn_statement_download() {
    $filepath = base64_decode(arg(2));
    
    header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    header('Content-Disposition: attachment;filename="'.basename($filepath).'"');
    header('Cache-Control: max-age=0');
    
    echo file_get_contents($filepath);
    exit;
}

function ncn_statement_delete() {
    $statement_id = arg(2);
    $result = db_query('SELECT * FROM {da_statement} WHERE statement_id=:d',array(':d'=>$statement_id));

    foreach($result as $statement)
    {
        $statement = (array)$statement;
        if($statement){
            unlink($statement['filepath']);
            $result = db_query('DELETE FROM {da_statement} WHERE id=:d',array(':d'=>$statement['id']));
            if ($result) {
                drupal_set_message(t('Deleted statement(#!id), successfully.', array('!id'=>$statement_id)));
            } else {
                drupal_set_message(t('Failed to delete statement(#!id).', array('!id'=>$statement_id)), 'error');
            }
        }
        if ($statement) {
            $ts_month = $statement['ts_month'];
            $uid = $statement['uid'];
            $_user = user_load($uid);
            if (is_distributor($_user)) {
                $type = 'distributor';
            } else {
                $type = 'associate';
            }

            $url = "admin/config/ncn_report/sales_detailed/$type/$ts_month/$uid";
        } else {
            $url = "admin/config/ncn_report/sales_detailed";
        }
        drupal_goto($url);
    }
}

//
//    if ($statement = db_fetch_array($result)) {
//      unlink($statement['filepath']);
//      $result = db_query("DELETE FROM {da_statement} WHERE id=%d", $statement['id']);
//      if ($result) {
//          drupal_set_message(t('Deleted statement(#!id), successfully.', array('!id'=>$statement_id)));
//      } else {
//          drupal_set_message(t('Failed to delete statement(#!id).', array('!id'=>$statement_id)), 'error');
//      }
//  }
//  if ($statement) {
//      $ts_month = $statement['ts_month'];
//      $uid = $statement['uid'];
//      $_user = user_load($uid);
//      if (is_distributor($_user)) {
//          $type = 'distributor';
//      } else {
//          $type = 'associate';
//      }
//
//      $url = "admin/config/ncn_report/sales_detailed/$type/$ts_month/$uid";
//  } else {
//      $url = "admin/config/ncn_report/sales_detailed";
//  }
//  drupal_goto($url);

///////////////////////////////////////////////////////////////////////////////
function ncn_statement_create_statement($uid, $timestamp, $auto=false) {
    $statement = ncn_statement_get_statement($uid, $timestamp);
    $b_recreated = false;
    if (empty($statement)) {
        $statement_id = ncn_statement_get_next_statement_id();
    } else {
        $b_recreated = true;
        $statement_id = $statement['statement_id'];
    }
    
    $s_month = date('Y_m', $timestamp);
    $dir_url = variable_get('file_directory_path', 'sites/default/files') . "/statement/$s_month/";
    
    if (!is_dir($dir_url)) {
        mkdir($dir_url, 0755);
    }
    
    $filename = 'statement_'.$statement_id.".xlsx";
    $filepath = $dir_url.$filename;
    $ts_month = strtotime(date('m/1/Y', $timestamp));
        
    if (ncn_statement_create_statement_file($statement_id, $uid, $timestamp, $filepath, date('U'), $auto)) {
        if ($b_recreated) {
            
            $result = db_query('UPDATE {da_statement} SET filename=:a, filepath=:b, timestamp=:c WHERE statement_id=:d',array(':a'=>$filename,':b'=>$filepath,':c'=>date('U'),':d'=>$statement_id));
            if ($result) {
                drupal_set_message(t('Recreated statement(#!id), successfully.', array('!id'=>$statement_id)));
            } else {
                drupal_set_message(t('Failed to recreate statement(#!id)', array('!id'=>$statement_id)));
            }
        } else {
            
            $result = db_query('INSERT INTO {da_statement} (statement_id, uid, ts_month, filename, filepath, timestamp) VALUES(:a,:b,:c,:d,:e,:f)',array(':a'=>$statement_id,':b'=>$uid,':c'=>$ts_month,':d'=>$filename,':e'=>$filepath,':f'=>date('U')));
            if ($result) {
                //variable_set('ncn_statement_next_id', $statement_id+1);
            }
            
            if ($result) {
                drupal_set_message(t('Created statement(#!id), successfully.', array('!id'=>$statement_id)));
            } else {
                drupal_set_message(t('Failed to create statement(#!id)', array('!id'=>$statement_id)));
            }
        }   
    } else {
        // watchdog('ncn_statement', "Failed to create ".$filename);
    }
}

function ncn_statement_get_next_statement_id() {
    $result = db_query('SELECT MAX(statement_id) FROM {da_statement}')->fetchField();
    $result += 1;
    if ($result < 142) {
        $result = 142;
    }
    return $result;
}
function ncn_statement_create_statement_file($statement_id, $uid, $report_date, $filepath, $timestamp, $auto=false) {   
    $data = array();
    $total= array();
    
    $_user = user_load($uid);
    if (is_distributor($_user)) {
        _ncn_report_get_data_distributor_detailed($data, $report_date, $uid);
    } else {
        _ncn_report_get_data_associate_detailed($data, $report_date, $uid);
    }
    
    if (count($data) == 0) {
        if (!$auto) {
            drupal_set_message(t("You don't need to create this statement."), 'warning');
        }
        return FALSE;
    }
    $total = 0;
    foreach($data as $key=>$data_part) {
        $total += $data_part[5];
    }
    
    require_once 'sites/all/libraries/php_xls/Classes/PHPExcel.php';
    $demo_file = "statement.tpl.xlsx";
    //$objReader = PHPExcel_IOFactory::createReader("Excel2007");
    try {
        $objReader = new PHPExcel_Reader_Excel2007();
        $objPHPExcel = $objReader->load($demo_file);
        
        $objPHPExcel->setActiveSheetIndex(0)->setTitle('#'.$statement_id);
        // Gradient
        $objPHPExcel->getActiveSheet()->getStyle('C2')->getFill()->setFillType(PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR);
        $objPHPExcel->getActiveSheet()->getStyle('B2')->getFill()->setFillType(PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR);
        $objPHPExcel->getActiveSheet()->getStyle('H2')->getFill()->setFillType(PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR);
        
        $objPHPExcel->getActiveSheet()->getStyle('C23')->getFill()->setFillType(PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR);
        $objPHPExcel->getActiveSheet()->getStyle('B23')->getFill()->setFillType(PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR);
        $objPHPExcel->getActiveSheet()->getStyle('H23')->getFill()->setFillType(PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR);
        ///////////////////////////////////////////////////////////////////////////
        $objPHPExcel->getActiveSheet()->setCellValue("G3" , 'STATEMENT #'.$statement_id);
        $objPHPExcel->getActiveSheet()->setCellValue("G4" , strtoupper('DATE: '.date('F d, Y', $timestamp)));
        
        $objPHPExcel->getActiveSheet()->setCellValue("D10" , $_user->profile_firstname.' '.$_user->profile_lastname);
        $objPHPExcel->getActiveSheet()->setCellValue("D11" , $_user->profile_address);
        $objPHPExcel->getActiveSheet()->setCellValue("D12" , $_user->profile_city.', '.$_user->profile_state.' '.$_user->profile_zip);
        
        
        $objPHPExcel->getActiveSheet()->setCellValue("D19" , $statement_id);
        $objPHPExcel->getActiveSheet()->setCellValue("D20" , date('n/d/Y', $timestamp));
        $objPHPExcel->getActiveSheet()->setCellValue("D21" , $total);
        $objPHPExcel->getActiveSheet()->setCellValue("G16" , $total);
        
        $objPHPExcel->getActiveSheet()->insertNewRowBefore(16, count($data));
        
        $index = 15;
        foreach($data as $key=>$data_part) {        
            $objPHPExcel->getActiveSheet()->setCellValue("C$index" , date('n/d/Y', $data_part[4]));
            $objPHPExcel->getActiveSheet()->setCellValue("D$index" , $data_part[1]);
            if ($data_part[2]) {
                $objPHPExcel->getActiveSheet()->setCellValue("E$index" , $data_part[2]);
            }
            if ($data_part[3]) {
                $objPHPExcel->getActiveSheet()->setCellValue("F$index" , $data_part[3]);
            }
            $objPHPExcel->getActiveSheet()->setCellValue("G$index" , $data_part[5]);
            
            $index += 1;
            
            /*$source = 'A15:I15';
            $dest = "A$index:I$index";
            //$objPHPExcel->getActiveSheet()->duplicateStyle( $objPHPExcel->getActiveSheet()->getStyle($source), $dest );*/
        }
        
        
        
        ///////////////////////////////////////////////////////////////////////////
        //$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, "Excel2007");
        $objWriter = new PHPExcel_Writer_Excel2007($objPHPExcel);
        /*$objWriterPart = $objWriter->getWriterPart('workbook');
        echo "<pre>";
        print_r ($objWriterPart);
        echo "</pre>";*/
        
        $objWriter->save($filepath);
    } catch(\Exception $e) {
        watchdog('ncn_statement', $e->getMessage().' in '.$e->getLine().' of '.$e->getFile());
        return FALSE;
    }
    return TRUE;
}

function ncn_statement_get_statement($uid, $timestamp) {
    $ts_month = strtotime(date('m/1/Y', $timestamp));
    $result = db_query('SELECT * FROM {da_statement} WHERE ts_month=:a AND uid=:b',array(':a'=>$ts_month,':b'=>$uid));

    foreach($result as $statement)
    {
        $statement = (array)$statement;
        if(!$statement)
        {
            return array();
        }
        return $statement;
    }

}

function build_statement_block($statement, $create_url) {
GLOBAL $base_url;
?>
    <div id="invoice_revisions">
    <table>
    <thead class="tableHeader-processed">
        <th>File</th>
        <th>Timestamp</th>
        <th>Operation</th>
    </thead>
    <tbody>
        <?php if(!empty($statement)): ?>
            <tr class="odd">
                <td><a href="<?= $base_url; ?>/statement/download/<?= base64_encode($statement['filepath']) ?>"><?= $statement['filename'] ?></a></td>
                <td><?= date("m/d/Y H:i:s", $statement['timestamp']); ?></td>
                <td>
                    <a href="<?= $create_url ?>">Recreate</a>&nbsp;&nbsp;&nbsp;
                    <a href="<?= "$base_url/statement/delete/".$statement['statement_id'] ?>" onclick="return confirm('Are you sure you want to delete this statement?');">Delete</a>
                </td>
            </tr>
        <?php else: ?>
            <tr>
                <td coslpan=3>No Statement file.</td>
            </tr>
        <?php endif; ?>
    </tbody>
    </table>
    </div>
<?php
}

// call in cron, 10th every month
function ncn_statement_month_action() {
    $now = date('U');
    $timestamp = strtotime(date('m/1/Y', $now));
    $timestamp = strtotime("-1 month", $timestamp);
    ncn_statement_check_all_statement($timestamp);
    $filepath = ncn_statement_merge_statement($timestamp);
    if ($filepath && is_file(DRUPAL_ROOT.'/'.$filepath)) {
        ncn_statement_send_auto_mail($filepath, $timestamp);
    }
}

function ncn_statement_check_all_statement($timestamp) {
    $distributor_list = get_user_list(5);
    $associate_list = get_user_list(7);
    $user_list = $distributor_list + $associate_list;
    
    foreach ($user_list as $uid=>$data) {
        $statement = ncn_statement_get_statement($uid, $timestamp);
        if (empty($statement) || !is_file(DRUPAL_ROOT.'/'.$statement['filepath'])) {
            ncn_statement_create_statement($uid, $timestamp, true);
        } else {
            $ts_month = strtotime(date('m/1/Y', $statement['timestamp']));
            $ts_month1 = strtotime("+1 month", $timestamp);
            if ($ts_month < $ts_month1) {
                ncn_statement_create_statement($uid, $timestamp, true);
            }
        }
    }
}

function ncn_statement_merge_statement($timestamp) {
    $result = db_query('SELECT * FROM {da_statement} WHERE ts_month=:d',array(':d'=>$timestamp));
    $s_month = date('Y_m', $timestamp);
    $dir_url = variable_get('file_directory_path', 'sites/default/files') . "/statement/$s_month/";
    $filename = "statements_".$s_month.".xlsx";
    $filepath = $dir_url.$filename;

    if (!$result->rowCount()) {
        return false;
    }

    require_once 'sites/all/libraries/php_xls/Classes/PHPExcel.php';
    // Create new PHPExcel object
    $objReader = new PHPExcel_Reader_Excel2007();
    $objPHPExcel = $objReader->load('statement.tpl.xlsx');
    //$objPHPExcel = new PHPExcel();
    
    $objPHPExcel->removeSheetByIndex(0);
    
//  while($statement = db_fetch_array($result))

    foreach($result as $statement)
    {
        $statement = (array)$statement;
        if (is_file(DRUPAL_ROOT.'/'.$statement['filepath'])) {
            $objReader_st = new PHPExcel_Reader_Excel2007();
            $objPHPExcel_st = $objReader_st->load($statement['filepath']);
            $pSheet_st = $objPHPExcel_st->getActiveSheet();
            $pSheet = $objPHPExcel->addExternalSheet($pSheet_st);
        }
    }
    
    if ($objPHPExcel->getSheetCount() == 0 ) {
        $objPHPExcel->createSheet();
    }
    
    $objWriter = new PHPExcel_Writer_Excel2007($objPHPExcel);
    $objWriter->save($filepath);
    
    return $filepath;
}

function ncn_statement_send_auto_mail($filepath, $timestamp) {
    $admin_user = user_load(1);
    $to = $admin_user->mail;
    $msg_subject = "Statements (".date('M Y', $timestamp).")";
    $msg = "This attached file is a statements file.";
    $message_part = '';
    $multipart = '';
    
    $boundary = "--".md5(uniqid(time()));
    $headers .= "MIME-Version: 1.0\n";
    $headers .= "Content-Type: multipart/mixed; boundary=\"$boundary\"\n";
    $code = "utf-8";
    $multipart .= "--$boundary\n";
    $multipart .= "Content-Type: text/plain; charset=$code\n";
    //$multipart .= "Content-Transfer-Encoding: Quot-Printed\n\n";
    $filename = basename($filepath);
    $multipart .= "$msg\n\n";

            if(fopen($filepath,"r")) $fp = fopen($filepath,"r");
            else return;
            $file = fread($fp, filesize($filepath));
            fclose($fp);
            $message_part .= "--$boundary\n";
            $message_part .= "Content-Type: application/octet-stream\n";
            $message_part .= "Content-Transfer-Encoding: base64\n";
            $message_part .= "Content-Disposition: attachment; filename = \"".$filename."\"\n\n";
            $message_part .= chunk_split(base64_encode($file))."\n";
    
    $multipart .= $message_part."--$boundary--\n";
    mail($to, $msg_subject, $multipart, $headers);
}

function ncn_statement_all_create_handler() {
    $uid = $_REQUEST['uid'];
    $timestamp = $_REQUEST['date'];
    $timestamp = strtotime(date('m/1/Y', $timestamp));
    ncn_statement_check_all_statement($timestamp);
    $filepath = ncn_statement_merge_statement($timestamp);
    if ($filepath && is_file(DRUPAL_ROOT.'/'.$filepath)) {
        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header('Content-Disposition: attachment;filename="'.basename($filepath).'"');
        header('Cache-Control: max-age=0');
    
        echo file_get_contents($filepath);
        exit;
    } else if ($filepath !== false) {
        drupal_set_message(t('Failed to create all statements'), 'error');
    }
    
    $_user = user_load($uid);
    if (is_distributor($_user)) {
        $type = 'distributor'; 
    } else {
        $type = 'associate'; 
    }
    $url = "admin/config/ncn_report/sales_detailed/$type/".$_REQUEST['date']."/$uid";
    drupal_goto($url);
}
